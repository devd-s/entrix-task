name: Deploy to AWS Dev

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install CDK dependencies
      run: npm ci
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/lambda_b/requirements.txt
        pip install pytest boto3
    
    - name: Run CDK tests (optional)
      run: npm test || true
    
    - name: CDK synth
      run: npm run synth
      env:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

  deploy-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install dependencies
      run: npm ci

    - name: Destroy existing stack (cleanup)
      run: npm run destroy -- --force
      env:
        ENVIRONMENT: dev
      continue-on-error: true
    
    - name: Deploy to Dev
      run: npm run deploy -- --require-approval never
      env:
        ENVIRONMENT: dev
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
    
    - name: Notify deployment success
      if: success()
      run: |
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ Deployment to Dev successful - ${{ github.sha }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack notification failed, but deployment succeeded"
        else
          echo "Slack webhook not configured, skipping notification"
        fi
    
    - name: Notify deployment failure
      if: failure()
      run: |
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ Deployment to Dev failed - ${{ github.sha }}"}' \
          ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack notification failed"
        else
          echo "Slack webhook not configured, skipping notification"
        fi
